{"version":3,"sources":["angular.js","timeCtrl.js","time.js","user.js"],"names":[],"mappingspGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["(function() {\r\n\r\n  'use strict';\r\n\r\n  angular.module('timeTracker', ['ngResource','ui.bootstrap'], function($interpolateProvider) {\r\n        $interpolateProvider.startSymbol('<%');\r\n        $interpolateProvider.endSymbol('%>');\r\n  });\r\n})();\r\n","(function() {\r\n\r\n  'use strict';\r\n\r\n  angular.module('timeTracker').controller('TimeEntryCtrl', TimeEntry)\r\n         .$inject=['$scope', '$resource'];\r\n\r\n  function TimeEntry($scope, time, user) {\r\n\r\n    // vm is our capture variable\r\n    // var vm = this;\r\n\r\n    $scope.timeentries = []; // Array\r\n    $scope.totalTime = {}; // Object\r\n\r\n    // Initialize the clockIn and clockOut times to the current time.\r\n    $scope.clockIn = new Date();\r\n    $scope.clockOut = new Date();\r\n\r\n    $scope.userId = $('#userIdElement').data('userId');\n    console.log(\"hi\");\n    //user.setUserName(username);\r\n\r\n\r\n    // Grab all the time entries saved in the database\r\n    getTimeEntries();\r\n    //getUser();\r\n\r\n    //User.getUser();\r\n\r\n\r\n    // Fetches the time entries and puts the results\r\n    // on the vm.timeentries array\r\n    function getTimeEntries() {\r\n      time.getTime().then(function(results) {\r\n        $scope.timeentries = results;\r\n          //updateTotalTime($scope.timeentries);\r\n        }, function(error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    function getUser() {\r\n      user.getUsers().then(function(result) {\r\n        $scope.users = result;\r\n      }, function(error) {\r\n        console.log(error);\r\n      });\r\n    }\r\n\r\n    // Submit the time entry that will be called\r\n    // when we click the \"Log Time\" button\r\n    function logNewTime() {\r\n      // Make sure that the clock-in time isn't after\r\n      // the clock-out time!\r\n      if($scope.clockOut < $scope.clockIn) {\r\n        alert(\"You can't clock out before you clock in!\");\r\n        return;\r\n      }\r\n\r\n      // Make sure the time entry is greater than zero\r\n      if($scope.clockOut - $scope.clockIn === 0) {\r\n        alert(\"Your time entry has to be greater than zero!\");\r\n        return;\r\n      }\r\n\r\n      var filteredClockIn = $scope.clockIn;\r\n      console.log(filteredClockIn);\r\n\r\n      // Call to the saveTime method on the time service\r\n      // to save the new time entry to the database\r\n      time.saveTime({\r\n        \"user_id\":$scope.timeEntryUser.id,\r\n        \"title\":$scope.title,\r\n        \"start_time\":$scope.clockIn,\r\n        \"end_time\":$scope.clockOut,\r\n        \"description\":$scope.description\r\n      }).then(function(success) {\r\n        getTimeEntries();\r\n        console.log(success);\r\n      }, function(error) {\r\n        console.log(error);\r\n      });\r\n\r\n      getTimeEntries();\r\n\r\n      // Reset clockIn and clockOut times to the current time\r\n      $scope.clockIn = moment();\r\n      $scope.clockOut = moment();\r\n\r\n      // Clear the comment field\r\n      $scope.comment = \"\";\r\n\r\n      // Deselect the user\r\n      $scope.timeEntryUser = \"\";\r\n    }\r\n\r\n  }\r\n\r\n})();\r\n","(function() {\r\n\r\n  'use strict';\r\n\r\n  angular.module('timeTracker').service('time', ['$resource', function($resource) {\r\n\r\n    // ngResource call to our static data\r\n    //var Time = $resource('data/time.json');\r\n\r\n    // ngResource call to the API with id as a paramaterized URL\r\n    // and setup for the update method\r\n    // 1st parameter = id, 2nd = default values\r\n    var Time = $resource('api/time/:id', {}, {\r\n      update: {\r\n        method: 'PUT'\r\n      }\r\n    });\r\n\r\n    this.getTime = function() {\r\n      return Time.query().$promise.then(function(results) {\r\n        angular.forEach(results, function(result) {\r\n\r\n          // Add the loggedTime property which calls\r\n          // getTimeDiff to give us a duration object\r\n          //result.loggedTime = getTimeDiff(result.start_time, result.end_time);\r\n        });\r\n        return results;\r\n      }, function(error) { // Check for errors\r\n        console.log(error);\r\n      });\r\n    }\r\n\r\n    this.saveTime = function(data) {\r\n      // Format the date-time so that MySQL can use it.\r\n      // Because moment's timepicker includes \"T\" and \"Z\"\r\n      var start = moment(data.start_time).format(\"YYYY-MM-DD HH:mm:ss\");\r\n      data.start_time = start;\r\n      var end = moment(data.end_time).format(\"YYYY-MM-DD HH:mm:ss\");\r\n      data.end_time = end;\r\n\r\n      // do a POST request with data. Handled by Laravel \"TimeEntriesController\"\r\n      return Time.save(data).$promise.then(function(success) {\r\n        console.log(success);\r\n      }, function(error) {\r\n        console.log(error);\r\n      });\r\n    }\r\n\r\n  }]);\r\n})();\r\n","(function(){\r\n'use strict';\r\n\r\n  angular.module('timeTracker').service('user', ['$resource', function($resource) {\r\n\r\n    return $resource('api/users/:id');\r\n\r\n    /*\r\n    var User = $resource('api/users/');\r\n\r\n\r\n    this.getUser = function() {\r\n      return User.query().$promise.then(function(results) {\r\n        return results;\r\n      }, function(error) {\r\n        console.log(error);\r\n      });\r\n    }\r\n    */\r\n\r\n\r\n  }]);\r\n\r\n})();\r\n"]}